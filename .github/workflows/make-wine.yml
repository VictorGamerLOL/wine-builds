name: make-wine

on:
  workflow_dispatch:
    inputs:
      staging_tag:
        description: 'Tag to build. vX.Y'
        required: true
        # no default

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions: write-all # needed for permission to create a tag and make a release
    container: archlinux:latest

    steps:
      - name: Setup arch container.
        run: |
          # Wine needs 32-bit libraries, so we need to enable the multilib repository
          echo -e "[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf

          # All your updates to represent your average Arch install
          pacman -Syyu --noconfirm base-devel git sudo

          # makepkg needs a user to build packages, cannot be ran as root
          useradd user -G wheel && echo "user ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

      - name: Checkout this repo.
        uses: actions/checkout@v4

      - name: Clone wine-tkg-git
        run: git clone https://github.com/Frogging-Family/wine-tkg-git.git

      - name: Mod customization.cfg
        run: ./custom-cfg-writer.sh ${{ github.event.inputs.staging_tag }}
      
      # - name: Build wine-tkg-git
      #   run: |
      #     # We need our user to own everything to interact with it duh.
      #     chown user -R . && cd wine-tkg-git/wine-tkg-git

      #     # Build the thing as the user, output the result to /tmp
      #     su user -c "yes | PKGDEST=/tmp/wine-tkg makepkg --noconfirm -s"
      
      # I am using this for debugging purposes, to see if the action is successful
      - name: Fake build wine-tkg-git
        run: | 
          mkdir -p /tmp/wine-tkg
          # reconstruct what an average wine arch package would look like, but in each directory there is a file with 1kb of nonsense. It should end up like
          # .
          # ├── .BUILDINFO
          # ├── .INSTALL
          # ├── .MTREE
          # ├── .PKGINFO
          # └── usr
          #     ├── bin
          #     ├── include
          #     ├── lib
          #     ├── lib32
          #     ├── share
          #     └── src

          # 894 byte .INSTALL
          dd if=/dev/urandom of=/tmp/wine-tkg/.INSTALL bs=1 count=894

          # 199.9 kib .MTREE
          dd if=/dev/urandom of=/tmp/wine-tkg/.MTREE bs=1 count=204799

          # 4.9 kib .PKGINFO
          dd if=/dev/urandom of=/tmp/wine-tkg/.PKGINFO bs=1 count=5119

          # 18.1 kib .BUILDINFO
          dd if=/dev/urandom of=/tmp/wine-tkg/.BUILDINFO bs=1 count=18559

          # a usr directory
          mkdir /tmp/wine-tkg/usr

          cd /tmp/wine-tkg/usr

          # all the other directories
          mkdir bin include lib lib32 share src

          # 1kb of nonsense in each directory
          dd if=/dev/urandom of=bin/nonsense bs=1 count=1024
          dd if=/dev/urandom of=include/nonsense bs=1 count=1024
          dd if=/dev/urandom of=lib/nonsense bs=1 count=1024
          dd if=/dev/urandom of=lib32/nonsense bs=1 count=1024
          dd if=/dev/urandom of=share/nonsense bs=1 count=1024
          dd if=/dev/urandom of=src/nonsense bs=1 count=1024

          # go back to the root of the directory
          cd /tmp/wine-tkg

          # create a tarball of the contents of the directory, hidden files included
          tar --zstd -cf wine-tkg-0.0.r0.000000000-000.pkg.tar.zst * .* 

      # just in case
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wine-tkg
          path: /tmp/wine-tkg

      - name: Recompress the contents of the .tar.zst
        run: |
          cd /tmp/wine-tkg
          # get the name of the tarball without its .pkg.tar.zst extension
          tarball=$(ls *.pkg.tar.zst | sed 's/.pkg.tar.zst//')
          # extract only the usr folder from the tarball
          tar -xf $tarball.pkg.tar.zst --wildcards --no-anchored 'usr/*'
          # move everything from usr to the root of the current directory
          mv usr/* .
          # delete the empty user
          rmdir usr
          # recompress the contents of the tarball, minus the original tarball
          tar -czf $tarball.tar.gz --exclude=$tarball.pkg.tar.zst *
      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            const commits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            })
            const latest_commit = commits.data[0]
            github.rest.git.createTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ github.event.inputs.staging_tag }}',
              message: 'Release v${{ github.event.inputs.staging_tag }}',
              object: latest_commit.sha,
              type: 'commit'
            })
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${{ github.event.inputs.staging_tag }}`,
              sha: latest_commit.sha
            })
        
      - name: Create release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            // find the file in tmp, should be a .pkg.tar.zst
            const files = fs.readdirSync('/tmp/wine-tkg')
            const file = files.find(f => f.endsWith('.pkg.tar.zst'))

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ github.event.inputs.staging_tag }}',
              name: 'Release ${{ github.event.inputs.staging_tag }}',
              body: 'Lorem ipsum.',
              draft: false,
              prerelease: false
            })

            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: file,
              data: fs.readFileSync(`/tmp/wine-tkg/${file}`)
            })

            // another file, this time a .tar.gz
            const file2 = files.find(f => f.endsWith('.tar.gz'))

            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: file2,
              data: fs.readFileSync(`/tmp/wine-tkg/${file2}`)
            })

