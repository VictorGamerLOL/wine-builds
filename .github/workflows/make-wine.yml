# This is a basic workflow to help you get started with Actions

name: make-wine

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      staging_tag:
        description: 'Tag to build. vX.Y'
        required: true
        # no default

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions: write-all
    container: archlinux:latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Setup arch container.
        run: |
          echo -e "[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
          pacman -Syyu --noconfirm base-devel git sudo
          useradd user -G wheel && echo "user ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout this repo.
        uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Clone wine-tkg-git
        run: git clone https://github.com/Frogging-Family/wine-tkg-git.git

      - name: Mod customization.cfg
        run: ./custom-cfg-writer.sh ${{ github.event.inputs.staging_tag }}
      
      - name: Build wine-tkg-git
        run: |
          chown user -R . && cd wine-tkg-git/wine-tkg-git
          su user -c "yes | PKGDEST=/tmp/wine-tkg makepkg --noconfirm -s"
      
      # - name: Fake build wine-tkg-git
      #   run: | 
      #     mkdir -p /tmp/wine-tkg
      #     # 1 kb file of random junk named wine-tkg-git-0.0.0-1-x86_64.pkg.tar.zst
      #     dd if=/dev/urandom of=/tmp/wine-tkg/wine-tkg-git-0.0.0-1-x86_64.pkg.tar.zst bs=1024 count=1

      # just in case
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wine-tkg
          path: /tmp/wine-tkg

      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            const commits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            })
            console.log(commits)
            const latest_commit = commits.data[0]
            github.rest.git.createTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ github.event.inputs.staging_tag }}',
              message: 'Release v${{ github.event.inputs.staging_tag }}',
              object: latest_commit.sha,
              type: 'commit'
            })
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${{ github.event.inputs.staging_tag }}`,
              sha: latest_commit.sha
            })
        
      - name: Create release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            // find the file in tmp, should be a .pkg.tar.zst
            const files = fs.readdirSync('/tmp/wine-tkg')
            const file = files.find(f => f.endsWith('.pkg.tar.zst'))

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ github.event.inputs.staging_tag }}',
              name: 'Release ${{ github.event.inputs.staging_tag }}',
              body: 'Lorem ipsum.',
              draft: false,
              prerelease: false
            })

            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: file,
              data: fs.readFileSync(`/tmp/wine-tkg/${file}`)
            })

